import React, { useState } from 'react'
import { ChevronDown, ChevronUp, Info, Download, Calendar, FileText } from 'lucide-react'
import TestResult from './TestResult'
import SummaryCard from './SummaryCard'

const LabResults = ({ results, fileName }) => {
  const [expandedPanels, setExpandedPanels] = useState({})
  const [showAllExplanations, setShowAllExplanations] = useState(false)

  const togglePanel = (panelId) => {
    setExpandedPanels(prev => ({
      ...prev,
      [panelId]: !prev[panelId]
    }))
  }

  const expandAllPanels = () => {
    const allPanels = {}
    Object.keys(results.panels || {}).forEach(panelId => {
      allPanels[panelId] = true
    })
    setExpandedPanels(allPanels)
  }

  const collapseAllPanels = () => {
    setExpandedPanels({})
  }

  // Calculate summary statistics
  const getSummaryStats = () => {
    let totalTests = 0
    let normalCount = 0
    let borderlineCount = 0
    let abnormalCount = 0
    let criticalCount = 0

    Object.values(results.panels || {}).forEach(panel => {
      Object.values(panel.tests || {}).forEach(test => {
        totalTests++
        switch (test.flag) {
          case 'normal':
            normalCount++
            break
          case 'borderline':
            borderlineCount++
            break
          case 'abnormal':
            abnormalCount++
            break
          case 'critical':
            criticalCount++
            break
        }
      })
    })

    return { totalTests, normalCount, borderlineCount, abnormalCount, criticalCount }
  }

  const stats = getSummaryStats()

  // Get flagged tests for quick overview
  const getFlaggedTests = () => {
    const flagged = []
    Object.entries(results.panels || {}).forEach(([panelId, panel]) => {
      Object.entries(panel.tests || {}).forEach(([testId, test]) => {
        if (test.flag !== 'normal') {
          flagged.push({
            panelName: panel.name,
            testName: test.name,
            value: test.value,
            unit: test.unit,
            flag: test.flag,
            referenceRange: test.referenceRange,
            explanation: test.explanation
          })
        }
      })
    })
    return flagged.sort((a, b) => {
      const flagOrder = { critical: 0, abnormal: 1, borderline: 2 }
      return flagOrder[a.flag] - flagOrder[b.flag]
    })
  }

  const flaggedTests = getFlaggedTests()

  // Export functionality
  const exportSummary = () => {
    const stats = getSummaryStats()
    const flaggedTests = getFlaggedTests()
    
    let summaryText = `AHS LAB REPORT ANALYSIS SUMMARY\n`
    summaryText += `======================================\n\n`
    summaryText += `Report: ${fileName || 'Lab Report'}\n`
    summaryText += `Analyzed: ${new Date().toLocaleDateString()}\n`
    summaryText += `Generated by AHS Lab Report Analyzer\n\n`
    
    summaryText += `OVERVIEW:\n`
    summaryText += `---------\n`
    summaryText += `Total Tests: ${stats.totalTests}\n`
    summaryText += `Normal: ${stats.normalCount}\n`
    summaryText += `Borderline: ${stats.borderlineCount}\n`
    summaryText += `Abnormal: ${stats.abnormalCount}\n`
    summaryText += `Critical: ${stats.criticalCount}\n\n`
    
    if (flaggedTests.length > 0) {
      summaryText += `TESTS REQUIRING ATTENTION (${flaggedTests.length}):\n`
      summaryText += `-----------------------------------\n`
      flaggedTests.forEach((test, index) => {
        summaryText += `${index + 1}. ${test.testName} (${test.panelName})\n`
        summaryText += `   Value: ${test.value} ${test.unit}\n`
        summaryText += `   Flag: ${test.flag.toUpperCase()}\n`
        summaryText += `   Reference: ${test.referenceRange}\n`
        summaryText += `   Explanation: ${test.explanation}\n\n`
      })
    }
    
    summaryText += `DETAILED RESULTS BY PANEL:\n`
    summaryText += `=========================\n\n`
    
    Object.entries(results.panels || {}).forEach(([panelId, panel]) => {
      summaryText += `${panel.name.toUpperCase()}\n`
      summaryText += `${'-'.repeat(panel.name.length)}\n`
      summaryText += `${panel.description}\n\n`
      
      Object.entries(panel.tests || {}).forEach(([testId, test]) => {
        summaryText += `  ${test.name}: ${test.value} ${test.unit}`
        if (test.flag !== 'normal') {
          summaryText += ` [${test.flag.toUpperCase()}]`
        }
        summaryText += `\n`
        summaryText += `    Reference: ${test.referenceRange}\n`
        if (test.flag !== 'normal') {
          summaryText += `    Note: ${test.explanation}\n`
        }
        summaryText += `\n`
      })
      summaryText += `\n`
    })
    
    summaryText += `IMPORTANT MEDICAL DISCLAIMER:\n`
    summaryText += `============================\n`
    summaryText += `This analysis is for informational purposes only and should not replace\n`
    summaryText += `professional medical advice. Lab results should always be interpreted by\n`
    summaryText += `qualified healthcare professionals in the context of your complete medical\n`
    summaryText += `history, symptoms, and physical examination. If you have questions about\n`
    summaryText += `your results or health concerns, please consult with your physician or\n`
    summaryText += `healthcare provider.\n\n`
    summaryText += `Generated by AHS Lab Report Analyzer v1.0.0\n`
    summaryText += `Alberta Health Services Compatible\n`
    
    // Create and download the file
    const blob = new Blob([summaryText], { type: 'text/plain' })
    const url = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = `AHS_Lab_Summary_${new Date().toISOString().split('T')[0]}.txt`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    window.URL.revokeObjectURL(url)
  }

  return (
    <div className="space-y-6">
      {/* Report Header */}
      <div className="card">
        <div className="flex justify-between items-start mb-4">
          <div>
            <h3 className="text-lg font-semibold text-ahs-blue mb-2">Report Information</h3>
            <div className="space-y-1 text-sm text-gray-600">
              <div className="flex items-center space-x-2">
                <FileText className="w-4 h-4" />
                <span>{fileName || 'Lab Report'}</span>
              </div>
              <div className="flex items-center space-x-2">
                <Calendar className="w-4 h-4" />
                <span>Analyzed: {new Date().toLocaleDateString()}</span>
              </div>
            </div>
          </div>
          
          <button className="btn-secondary flex items-center space-x-2" onClick={exportSummary}>
            <Download className="w-4 h-4" />
            <span>Export Summary</span>
          </button>
        </div>

        {/* Summary Statistics */}
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
          <SummaryCard
            title="Total Tests"
            value={stats.totalTests}
            color="blue"
          />
          <SummaryCard
            title="Normal"
            value={stats.normalCount}
            color="green"
          />
          <SummaryCard
            title="Borderline"
            value={stats.borderlineCount}
            color="yellow"
          />
          <SummaryCard
            title="Abnormal"
            value={stats.abnormalCount}
            color="red"
          />
          <SummaryCard
            title="Critical"
            value={stats.criticalCount}
            color="red"
            critical={true}
          />
        </div>
      </div>

      {/* Flagged Tests Summary */}
      {flaggedTests.length > 0 && (
        <div className="card">
          <h3 className="text-lg font-semibold text-ahs-blue mb-4">
            Tests Requiring Attention ({flaggedTests.length})
          </h3>
          <div className="space-y-3">
            {flaggedTests.map((test, index) => (
              <div key={index} className="bg-gray-50 rounded-lg p-4">
                <div className="flex justify-between items-start">
                  <div>
                    <h4 className="font-medium text-gray-800">{test.testName}</h4>
                    <p className="text-sm text-gray-600">{test.panelName}</p>
                  </div>
                  <div className="text-right">
                    <div className="flex items-center space-x-2">
                      <span className="font-medium">{test.value} {test.unit}</span>
                      <span className={`medical-flag-${test.flag}`}>
                        {test.flag.charAt(0).toUpperCase() + test.flag.slice(1)}
                      </span>
                    </div>
                    <p className="text-xs text-gray-500 mt-1">
                      Reference: {test.referenceRange}
                    </p>
                  </div>
                </div>
                {showAllExplanations && (
                  <div className="mt-3 p-3 bg-blue-50 rounded border-l-4 border-ahs-blue">
                    <p className="text-sm text-gray-700">{test.explanation}</p>
                  </div>
                )}
              </div>
            ))}
          </div>
          
          <button
            onClick={() => setShowAllExplanations(!showAllExplanations)}
            className="mt-4 text-ahs-blue hover:text-ahs-light-blue font-medium text-sm flex items-center space-x-1"
          >
            <Info className="w-4 h-4" />
            <span>
              {showAllExplanations ? 'Hide' : 'Show'} Explanations
            </span>
          </button>
        </div>
      )}

      {/* Panel Controls */}
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold text-ahs-blue">
          Detailed Test Results by Panel
        </h3>
        <div className="space-x-2">
          <button
            onClick={expandAllPanels}
            className="text-sm text-ahs-blue hover:text-ahs-light-blue"
          >
            Expand All
          </button>
          <button
            onClick={collapseAllPanels}
            className="text-sm text-ahs-blue hover:text-ahs-light-blue"
          >
            Collapse All
          </button>
        </div>
      </div>

      {/* Test Panels */}
      <div className="space-y-4">
        {Object.entries(results.panels || {}).map(([panelId, panel]) => {
          const isExpanded = expandedPanels[panelId]
          const panelTestCount = Object.keys(panel.tests || {}).length
          const panelFlaggedCount = Object.values(panel.tests || {}).filter(
            test => test.flag !== 'normal'
          ).length

          return (
            <div key={panelId} className="card">
              <button
                onClick={() => togglePanel(panelId)}
                className="w-full flex justify-between items-center text-left"
                aria-expanded={isExpanded}
              >
                <div>
                  <h4 className="text-lg font-semibold text-ahs-blue">{panel.name}</h4>
                  <p className="text-sm text-gray-600 mt-1">{panel.description}</p>
                  <div className="flex items-center space-x-4 mt-2 text-sm">
                    <span className="text-gray-500">
                      {panelTestCount} test{panelTestCount !== 1 ? 's' : ''}
                    </span>
                    {panelFlaggedCount > 0 && (
                      <span className="text-medical-red font-medium">
                        {panelFlaggedCount} flagged
                      </span>
                    )}
                  </div>
                </div>
                {isExpanded ? (
                  <ChevronUp className="w-5 h-5 text-gray-400" />
                ) : (
                  <ChevronDown className="w-5 h-5 text-gray-400" />
                )}
              </button>

              {isExpanded && (
                <div className="mt-6 space-y-4">
                  {Object.entries(panel.tests || {}).map(([testId, test]) => (
                    <TestResult
                      key={testId}
                      test={test}
                      testId={testId}
                    />
                  ))}
                </div>
              )}
            </div>
          )
        })}
      </div>

      {/* Medical Disclaimer */}
      <div className="card bg-yellow-50 border-yellow-200">
        <div className="flex items-start space-x-3">
          <Info className="w-6 h-6 text-yellow-600 mt-1" />
          <div>
            <h4 className="font-semibold text-yellow-800 mb-2">Important Medical Disclaimer</h4>
            <p className="text-yellow-700 text-sm leading-relaxed">
              This analysis is for informational purposes only and should not replace professional medical advice. 
              Lab results should always be interpreted by qualified healthcare professionals in the context of your 
              complete medical history, symptoms, and physical examination. If you have questions about your results 
              or health concerns, please consult with your physician or healthcare provider.
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}

export default LabResults 